#!/bin/bash
#
# Performs mapping of functions across commits in a .git repository.
#
# @author Solomon Hawk <solomon.hawk@viget.com>

read -d '' HELP <<-EOF
  Usage: $0 [options]
      -b BRANCH_NAME         The branch to analyze.
      -r REVISION_STRING     Revision string range to inspect.         (r - revision)
      -t FOLDER_PATH         Path to the temp directory.               (t - temp)
      -f EXECUTABLE_PATH     Run before analysis of each commit.       (f - before)
      -e EXECUTABLE_PATH     Run on each file in each commit.          (e - each)
                               Note: may run on .gitignored files, but
                               not on the .git directory itself.
      -a EXECUTABLE_PATH     Run after analysis of each commit.        (a - after)
      -d EXECUTABLE_PATH     Run after all commits are analyzed.       (d - done)
      -p GIT_PROJECT_PATH    Path or URL to 'git clone' for analysis.  (p - project/path)
      -v                     Turn on verbose mode.
      -l                     Redirect location for log output.

      -h                     Print this usage message.
EOF

# the default .git repository is the
# dir this script was invoked from
REPOSITORY=`pwd`

VERBOSE=false
REVISION=''                # revision string to inspect
USER_REVISION=''           # user provided revision
ROOT_DIR='.gitalyze'       # default name of gitalyze directory
REPO_DIR="$ROOT_DIR/repo"  # default name of repo directory
TMP_DIR="$ROOT_DIR/tmp"   # default name of temp directory
BRANCH='master'            # default to master branch
BEFORE_COMMIT=''           # run before analyzing a commit
EACH_FILE=''               # run on each file in a commit
AFTER_COMMIT=''            # run after analysis of a commit
AFTER_ALL=''               # run after all steps
LOG=/dev/null              # by default log to /dev/null

# expand $HOME in path
expand_path() {
  echo `sh -c "echo $1"`
}

# print usage text
usage() {
  echo "${HELP}"
}

# parse options
while getopts 'a:b:d:e:f:l:p:r:t:hv' flag; do
  case "${flag}" in
    a) AFTER_COMMIT="${OPTARG}" ;;
    b) BRANCH="${OPTARG}" ;;
    d) AFTER_ALL="${OPTARG}" ;;
    e) EACH_FILE="${OPTARG}" ;;
    f) BEFORE_COMMIT="${OPTARG}" ;;
    l) LOG="${OPTARG}" ;;
    p) REPOSITORY="${OPTARG}" ;;
    r) USER_REVISION="${OPTARG}" ;;
    t) TMP_DIR="${OPTARG}" ;;
    v) VERBOSE=true ;;
    h|*) usage; exit 0 ;;
  esac
done

# expand temp directory path
ROOT_DIR=$(expand_path "$HOME/${ROOT_DIR}")
REPO_DIR=$(expand_path "$HOME/${REPO_DIR}")
TMP_DIR=$(expand_path "$HOME/${TMP_DIR}")

if [ ${LOG} != /dev/null ]; then
  if [ ! -f ${LOG} ]; then
    touch ${LOG}
  fi

  LOG="$(cd "$(dirname ${LOG})"; pwd)/$(basename ${LOG})"

  if [ ${VERBOSE} == true ]; then
    echo "Logging to \"${LOG}\"."
  fi
fi

# set environment variables
export GITALYZE_VERBOSE=${VERBOSE}
export GITALYZE_ROOT_DIR=${ROOT_DIR}
export GITALYZE_REPO_DIR=${REPO_DIR}
export GITALYZE_TMP_DIR=${TMP_DIR}
export GITALYZE_LOG=${LOG}

#######################################
# Functions
#######################################

# clear out the temp directory
create_root_dir() {
  echo "Creating root directory \"${ROOT_DIR}\"." >> $GITALYZE_LOG

  if [ ! -d ${ROOT_DIR} ]; then
    mkdir ${ROOT_DIR}
  fi
}

# clear out the temp directory
clear_temp_and_repo_dirs() {
  if [ -d ${TMP_DIR} ]; then
    echo "Clearing temp directory \"${TEMP_DIR}\"." >> $GITALYZE_LOG
    rm -rf ${TMP_DIR}/*
  else
    echo "Creating temp directory \"${TMP_DIR}\"." >> $GITALYZE_LOG
    mkdir ${TMP_DIR}
  fi

  if [ -d ${REPO_DIR} ]; then
    echo "Clearing the repository directory \"${REPO_DIR}\"." >> $GITALYZE_LOG
    rm -rf ${REPO_DIR}
  fi
}

# clone the repo into REPO_DIR
clone_git_repository() {
  local msg="Cloning: \"${REPOSITORY}\""

  echo $msg >> $GITALYZE_LOG

  if [ ${VERBOSE} == true ]; then
    echo $msg
    $(git clone $REPOSITORY ${REPO_DIR})
  else
    $(git clone $REPOSITORY ${REPO_DIR} &>$GITALYZE_LOG)
  fi
}

# If the user provides a revision, ensure we respect
# the provided branch and store the revision for later.
# If the user does not provide a revision string, use
# all commits in the selected branch.
set_revision_range() {
  echo "Checking revision range." >> $GITALYZE_LOG

  local msg="Checking out ${BRANCH}."

  if [ ! -z "${USER_REVISION}" ]; then
    echo "User revision supplied." >> $GITALYZE_LOG

    REVISION=${USER_REVISION}

    if [ "$(git rev-parse --abbrev-ref HEAD)" != "${BRANCH}" ]; then
      if [ ${VERBOSE} == true ]; then
        echo ${msg}
        $(git checkout -f ${BRANCH})
      else
        echo ${msg} >> $GITALYZE_LOG
        $(git checkout -fq ${BRANCH} 2>$GITALYZE_LOG)
      fi
    fi
  else
    REVISION=$(git rev-list --max-parents=0 HEAD)..HEAD
    echo "No user revision specified, defaulting to ${REVISION}." >> $GITALYZE_LOG
  fi

  if [ ${VERBOSE} == true ]; then
    echo "Using revision range: \"${REVISION}\"" | tee -a $GITALYZE_LOG
  fi
}

# Using git rev-list, extract a full list of commit hashes
# in the provided revision range inclusive of the first commit.
# This yields a space-separated string of commits with a "-"
# prepended to the first line which is removed with sed below.
collect_commit_hash_list() {
  cd ${REPO_DIR}

  # http://stackoverflow.com/a/17600090/4611471
  if hashes=$(git rev-list --reverse ${REVISION} --boundary 2>/dev/null); then
    hashes=$(echo $hashes | sed s/-//)
  else
    echo "Bad revision argument provided. Check that you can run 'git rev-list ${REVISION}' in your repository without errors." >&2
    exit 1
  fi
}

# loop through hashes executing user programs
do_hashes () {
  for hash in ${hashes}; do
    # checkout the commit with this hash
    if [ ${VERBOSE} == true ]; then
      $(git checkout -f ${hash})
    else
      $(git checkout -fq ${hash})
    fi

    # run the BEFORE_COMMIT script
    if [ ! -z ${BEFORE_COMMIT} ]; then
      ${BEFORE_COMMIT} ${hash}
    fi

    # run the EACH_FILE program on each file if provided
    if [ ! -z ${EACH_FILE} ]; then
      for file in $(find . -name '*' -not -path '*.git*'); do
        ${EACH_FILE} ${hash} ${file}
      done
    fi

    # run the AFTER_COMMIT program if provided
    if [ ! -z ${AFTER_COMMIT} ]; then
      ${AFTER_COMMIT} {hash}
    fi
  done

  # run the AFTER_COMMIT program if provided
  if [ ! -z ${AFTER_ALL} ]; then
    ${AFTER_ALL} {hash}
  fi
}

#######################################
# Main program entry point
#######################################
main() {
  create_root_dir
  clear_temp_and_repo_dirs
  clone_git_repository
  set_revision_range
  collect_commit_hash_list
  do_hashes
  # clear_temp_and_repo_dirs
}

main